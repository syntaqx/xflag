version: 2.1
executors:
  golang:
    docker:
      - image: syntaqx/ci

aliases:
- &restore_mod_cache
    restore_cache:
      keys:
        - go-mod-v1-{{ checksum "go.sum" }}
- &save_mod_cache
    save_cache:
      key: go-mod-v1-{{ checksum "go.sum" }}
      paths:
        - "/go/pkg/mod"

jobs:
  modules:
    executor: golang
    steps:
      - checkout
      - *restore_mod_cache
      - run: go mod download
      - *save_mod_cache

  lint:
    docker:
      - image: golangci/golangci-lint
    steps:
      - checkout
      - *restore_mod_cache
      - run: golangci-lint run

  test:
    executor: golang
    steps:
      - checkout
      - *restore_mod_cache
      - run: |
          trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
          go test -v -race -coverprofile=/tmp/coverage.out -covermode=atomic ./... | tee /tmp/test-results/go-test.out
          goveralls -coverprofile=/tmp/coverage.out -service=circle-ci -repotoken $COVERALLS_TOKEN
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

workflows:
  version: 2
  test:
    jobs:
      - modules
      - test:
          requires:
            - modules
      - lint:
          requires:
            - modules
